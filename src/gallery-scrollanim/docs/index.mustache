<div class="intro">
    <p>
    ScrollAnim is a widget that animates HTML elements based on vertical page scroll.  With ScrollAnim widget, you can quickly create sites that have various HTML elements move or fade according to how far the user has scrolled down the site.  The animation for each HTML element is also gracefully controlled by easing functions of your choosing.  Also the widget is great for achieving the popular "parallax effects", when certain elements (especially the backgrounds) move at a different speed than the user-controlled scrolling speed.   
    </p>
</div>

<h2>Getting Started</h2>

<p>To include the source files for ScrollAnim and its dependencies, first load the YUI seed file if you haven't already loaded it.</p>

```
<script src="http://yui.yahooapis.com/3.8.0/build/yui/yui-min.js"></script>
```

<p>Next, create a new YUI instance for your application and populate it with the modules you need by specifying them as arguments to the `YUI().use()` method. YUI will automatically load any dependencies required by the modules you specify.</p>

```
<script>
// Create a new YUI instance and populate it with the required modules.
YUI().use('gallery-scrollanim', function (Y) {
    // ScrollAnim is available and ready for use. Add implementation
    // code here.
});
</script>
```

<p>For more information on creating YUI instances and on the <a href="http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_use">use() method</a>, see the documentation for the <a href="http://yuilibrary.com/yui/docs/yui/index.html">YUI Global Object</a>. </p>

<h2>Using ScrollAnim</h2>

<h3>Instantiating a ScrollAnim Widget</h3>
<p>The following code example shows the basic widget configuration and how instantiate the ScrollAnim widget.  The widget will be up and running after it is successfully instantiated.</p>

```
/* Somewhere inside YUI().use() callback function */
var scrollAnimConfig = {
        node: '#scrollanim-container',            // main container selector
        animations: animations,                   // animation data (IMPORTANT)
        maxScroll: 1500                           // max scroll
    },
    scrollAnimWidget;

/* Scroll animation will start immediately after instantiation */
scrollAnimWidget = new Y.ScrollAnim(scrollAnimConfig);
```
<p>The most important data to the widget is the `animation` attribute.  Please see the following section for more information on the structure and required properties in the `animation` attribute.</p>

<h3>`Animation` Attribute</h3>

<p>The `animation` attribute will contain individual animation details for each HTML element.  Below is an example of the animation attribute:</p>

```
var animation = 
    [
    	    {
	            selector: '#divContainer',
	            startAt: 500,
	            endAt: 1200,
	            onEndAnimate: function( anim ) {},
	            keyframes: [
	                { 
	         	        position: 0,
	         		    properties: {
	         		    	"top": 0,
                            "background-position" : {x:"50%",y:0}
	         		    }	
	         	    },
	                {
	         	        position: 1,
	         		    ease: TWEEN.Easing.Linear.EaseNone,
	         		    properties: {
	         		    	"top": 100,
                            "background-position" : {x:"50%",y:-100}
	         		    }
	         	    }
	            ]
	        },    
    	    {
	            selector: '#divContainer article',
	            startAt: 0,
	            endAt: 600,
	            onEndAnimate: function( anim ) {},
	            keyframes: [
	                { 
	         	        position: 0,
	         		    properties: {
	         		    	"top": 250,
	         			    "opacity": 1
	         		    }	
	         	    },
	                {
	         	        position: 1,
	         		    ease: TWEEN.Easing.Quadratic.EaseInOut,
	         		    properties: {
	         		    	"top": -100,
	         		        "opacity": 0
	         		    }
	         	    }
	            ]
	        }
	]
```

<p>The following table shows all possible properties to each object in the animation attribute:</p>
<table>
    <tr><th>Property</th><th>Description</th><th>Type</th><th>Required</th></tr>
    <tr><td>`selector`</td><td>CSS selector used to retrieve an element</td><td>String</td><td>Yes</td></tr>
    <tr><td>`startAt`</td><td>`window.scrollTop` position where the animation for this element should start</td><td>Integer</td><td>Yes</td></tr>
</table>


<h3>ScrollAnim Attributes</h2>

<p>ScrollAnim requires the following attributes to be set, in addition to the attributes provided by the base <a href="http://yuilibrary.com/yui/docs/widget/index.html#attributes">Widget</a> class:</p>

<table>
    <tr><th>Attribute (Required)</th><th>Description</th></tr>
    <tr><td>`node`</td><td>Main container selector</td></tr>
    <tr><td>`animations`</td><td>Animation data for all animated HTML elements</td></tr>    
    <tr><td>`maxScroll`</td><td>Maximum `window.scrollTop` value in which the scrolling animation should stop</td></tr>
</table>

<p>The following are optional attributes:</p>

<table>
    <tr><th>Attribute (Optional)</th><th>Description</th><th>Default Value</th></tr>
    <tr><td>`startAt`</td><td>Minimum `window.scrollTop` value in which the scrolling animation should start</td><td>0 (pixel)</td></tr>
    <tr><td>`useRAF`</td><td>Set if the widget should use `window.requestAnimationFrame` method when available.</td><td>true</td></tr>
    <tr><td>`tickSpeed`</td><td>Set interval (ms) for `window.setInterval` if not using RAF</td><td>100 (milliseconds)</td></tr>
    <tr><td>`scrollSpeed`</td><td>Scrolling animation speed, controlling how responsive the animation is to user mouse wheel scroll, from 0-100</td><td>20</td></tr>
    <tr><td>`tweenSpeed`</td><td>`window.scrollTop` tween speed</td><td>0.3</td></tr>
    <tr><td>`debug`</td><td>Turn on debug mode</td><td>false</td></tr>
</table>

<h2>Markup Structure</h2>

<p>The widget does not require much markup beyond the widget container.  However, for most cases you will have a site that needs the users to scroll vertically.  In this case, you will need a parent element containing the rest of the animated elements that will move upward.  To achieve this you will need both markup and configuration in the `animation` attribute.

<h2>CSS</h2>

<p>*Required markup structure explained*</p>

<h2>3rd Party Dependency</h2>

<p>*Explain use of Tween.js here*</p>